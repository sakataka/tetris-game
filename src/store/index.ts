// Unified export of new split Zustand store collection

// Accessibility Store (unified: visual + cognitive + input)
export {
  useAccessibility,
  useAccessibilityEnabled,
  useAccessibilityLevel,
  useAccessibilityStore,
  useAnimationSettings,
  useApplyAccessibilityPreset,
  useAutoSave,
  // Cognitive accessibility
  useCognitiveAccessibilityState,
  useCognitiveAssistance,
  useColorBlindnessType,
  useColorCodedPieces,
  useConfirmActions,
  useContrastLevel,
  useDetectSystemPreferences,
  useDetectSystemVisualPreferences,
  useDisableFocusMode,
  useDropPreview,
  useEnableAccessibilityMode,
  useEnableBasicKeyboard,
  useEnableFocusMode,
  useEnableFullFeedback,
  useEnableGamingMode,
  useEnableMinimalFeedback,
  useEnableOptimizedKeyboard,
  useEnableScreenReaderMode,
  useEnableSilentMode,
  useFeedbackSettings,
  useFocusOutline,
  useFontSizeLevel,
  useGameAccessibility,
  useGridLines,
  useHapticFeedback,
  // Input accessibility
  useInputAccessibilityState,
  useKeyboardEnabled,
  useKeyboardNavigation,
  usePauseOnBlur,
  usePauseOnFocusLoss,
  useResetAllAccessibility,
  // Reset functions
  useResetCognitiveToDefaults,
  useResetInputToDefaults,
  useScreenReader,
  useSetAccessibilityLevel,
  useSetAnimationIntensity,
  useSetColorBlindnessType,
  useSetContrast,
  useSetFontSize,
  useSetUIComplexity,
  useSimplifiedUI,
  useSkipLinks,
  useSoundEffects,
  useTabOrder,
  useTimeoutWarnings,
  useToggleAccessibility,
  useToggleAutoSave,
  useToggleConfirmActions,
  useToggleHapticFeedback,
  useToggleHighContrast,
  useToggleKeyboardFocus,
  useToggleLargeText,
  useToggleReducedMotion,
  useToggleSimplifiedUI,
  useToggleSoundEffects,
  useToggleVoiceAnnouncements,
  useUpdateCognitiveAssistance,
  useUpdateFeedbackSettings,
  useUpdateGameSpecific,
  useUpdateKeyboardNavigation,
  useUpdateVisualAssistance,
  // Visual accessibility
  useVisualAccessibilityState,
  useVisualAssistance,
  useVisualGameOver,
  useVoiceAnnouncements,
} from './accessibilityStore';
// Error Store (consolidated error handling)
export {
  useErrorActions,
  useErrorConfig,
  useErrorSelectors,
  useErrorStats,
  useErrorStore,
  useErrorSummary,
  useErrors,
  useErrorsByCategory,
  useErrorsByLevel,
  useSelectedErrorId,
  useShowErrorPanel,
} from './errorStore';

// Game State Store
export {
  useCalculatePiecePlacementState,
  useClearLineEffect,
  useDropTime,
  useGameState as useNewGameState,
  useGameStateStore,
  useMovePieceToPosition,
  useResetGame,
  useRotatePieceTo,
  useSetDropTime,
  useSetGameState,
  useTogglePause,
  useUpdateLineEffect,
  useUpdateParticles,
} from './gameStateStore';
// I18n Store (unified language + locale)
export {
  type LanguageChangeCallback,
  useCurrentLanguage,
  useDateFormat,
  useI18nStore,
  useInitializeLanguage,
  useIsRTL,
  useLanguageChange,
  useSetLanguage,
  useSupportedLanguages,
} from './i18nStore';
// Settings Store (unified with navigation)
export {
  // Navigation selectors
  useActiveTab,
  useAddKeyBinding,
  useAudioEnabled,
  useGetKeyBinding,
  useIsKeyBound,
  useIsMuted,
  useKeyBindings,
  useRemoveKeyBinding,
  useResetKeyBindings,
  useResetSettings,
  // Navigation actions
  useSetActiveTab,
  // Settings selectors
  useSettings,
  useSettingsStore,
  useShowGhost,
  useShowParticles,
  useTheme,
  useToggleAudioEnabled,
  useToggleMute,
  useToggleShowGhost,
  useToggleShowParticles,
  useUpdateKeyBinding,
  // Settings actions
  useUpdateSettings,
  useUpdateTheme,
  useUpdateVolume,
  useVolume,
} from './settingsStore';
// Statistics Store (unified with session management)
export {
  // Statistics actions
  useAddHighScore,
  useAddLines,
  useAddPlayTime,
  useAddScore,
  useAddTetris,
  useClearAllSessions,
  useClearHighScores,
  // Session selectors
  useCurrentSession,
  useEndPlaySession,
  useGetActiveSession,
  // Computed getters
  useGetAverageScore,
  useGetEfficiency,
  useGetSessionDuration,
  useGetTotalPlayTime,
  // Statistics selectors
  useHighScores,
  useIncrementGameCount,
  useIncrementTotalGames,
  useIsSessionActive,
  usePlaySessions,
  useResetStatistics,
  useSessionStats,
  // Session actions
  useStartPlaySession,
  useStatistics,
  useStatisticsStore,
  useUpdateBestScore,
  useUpdateBestStreak,
  useUpdateStatistics,
} from './statisticsStore';
// Theme Store
export {
  useSetAccessibilityOptions,
  useSetEffectIntensity,
  useSetTheme,
  useTheme as useNewTheme,
  useThemeAccessibility,
  useThemeConfig,
  useThemeStore,
  useToggleAnimations,
  useUpdateThemeState,
} from './themeStore';

// Legacy store removal completed

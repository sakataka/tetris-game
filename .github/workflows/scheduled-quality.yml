name: Scheduled Quality Review

on:
  schedule:
    # 毎週月曜日の朝9時（JST）に実行
    - cron: '0 0 * * 1'
  workflow_dispatch:

jobs:
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: 🔄 Check for outdated dependencies
        run: |
          echo "## 📦 Outdated Dependencies Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          pnpm outdated --format json | jq -r '.[] | "- **\(.name)**: \(.current) → \(.latest)"' >> $GITHUB_STEP_SUMMARY || echo "All dependencies are up to date! ✅" >> $GITHUB_STEP_SUMMARY

      - name: 🔒 Security audit
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔒 Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          pnpm audit --json | jq -r '.advisories | to_entries | .[] | .value | "- **\(.title)** (\(.severity)): \(.module_name)@\(.findings[0].version)"' >> $GITHUB_STEP_SUMMARY || echo "No security vulnerabilities found! ✅" >> $GITHUB_STEP_SUMMARY

      - name: 📊 Create issue for updates
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Weekly Dependency Review - ${date}`,
              body: 'Automated dependency review found issues. Please check the workflow summary for details.',
              labels: ['dependencies', 'maintenance']
            });

  code-metrics:
    name: Code Quality Metrics
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📊 Generate complexity report
        run: |
          echo "## 🧮 Code Complexity Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Complexity analysis would be performed here (es6-plato not installed)" >> $GITHUB_STEP_SUMMARY

      - name: 📈 TypeScript coverage
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 TypeScript Coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "TypeScript coverage analysis would be performed here" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload complexity report
        if: false
        uses: actions/upload-artifact@v4
        with:
          name: complexity-report
          path: complexity-report/
          retention-days: 30

  performance-baseline:
    name: Performance Baseline
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build application
        run: pnpm build

      - name: 📊 Bundle size analysis
        run: |
          echo "## 📊 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          pnpm analyze

      - name: 🚀 Start server
        run: |
          pnpm start &
          sleep 15

      - name: 🔍 Lighthouse performance audit
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Lighthouse Performance Scores" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Lighthouse analysis would be performed here" >> $GITHUB_STEP_SUMMARY
          echo "{}" > lighthouse-report.json

      - name: 📤 Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            .next/analyze/
            lighthouse-report.json
          retention-days: 30

  test-coverage-trend:
    name: Test Coverage Trend
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run tests with coverage
        run: pnpm test:coverage
        continue-on-error: true

      - name: 📊 Generate coverage summary
        run: |
          echo "## 🧪 Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/coverage-summary.json ]; then
            echo "| Type | Coverage |" >> $GITHUB_STEP_SUMMARY
            echo "|------|----------|" >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json | jq -r '.total | to_entries | .[] | "| \(.key) | \(.value.pct)% |"' >> $GITHUB_STEP_SUMMARY || echo "Coverage data not available" >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage data not available" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📈 Compare with previous coverage
        uses: actions/github-script@v7
        with:
          script: |
            // This would compare with previous runs and create trends
            console.log('Coverage trend analysis would go here');

  create-summary-issue:
    name: Create Summary Issue
    runs-on: ubuntu-latest
    needs: [dependency-review, code-metrics, performance-baseline, test-coverage-trend]
    if: always()

    steps:
      - name: 📝 Create weekly summary issue
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 Weekly Quality Review - ${date}`,
              body: `## Weekly Quality Review Summary

            This is an automated weekly quality review. Check the [workflow run](${runUrl}) for detailed reports.

            ### 📋 Review Categories:
            - [ ] Dependency updates reviewed
            - [ ] Security vulnerabilities addressed
            - [ ] Code complexity analyzed
            - [ ] Performance baselines checked
            - [ ] Test coverage trends reviewed

            ### 📎 Artifacts:
            - Complexity Report
            - Performance Reports
            - Coverage Reports

            Please review the workflow summary and attached artifacts for detailed information.`,
              labels: ['quality-review', 'automated']
            });
